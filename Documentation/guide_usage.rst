# GuardVision - Guide d'Utilisation

.. image:: https://img.shields.io/badge/Version-1.0-blue.svg
   :alt: Version

.. image:: https://img.shields.io/badge/Python-3.8+-green.svg
   :alt: Python Version

.. image:: https://img.shields.io/badge/License-MIT-yellow.svg
   :alt: License

## Description

GuardVision est un syst√®me de surveillance intelligent utilisant l'intelligence artificielle pour d√©tecter automatiquement les actions suspectes et analyser la densit√© de foule en temps r√©el. Le syst√®me combine deux mod√®les d'IA pour fournir une surveillance compl√®te et g√©n√®re des rapports d√©taill√©s.

## Fonctionnalit√©s Principales

- **Reconnaissance d'Actions** : D√©tection automatique de 13 types d'actions (bagarre, vol, vandalisme, etc.)
- **Analyse de Foule** : Estimation de la densit√© de foule en temps r√©el
- **D√©tection de Poses** : Suivi des poses humaines avec MediaPipe
- **Rapports Automatiques** : G√©n√©ration de rapports journaliers en langage naturel
- **Interface Web Interactive** : Interface utilisateur moderne avec Streamlit

## Pr√©-requis Syst√®me

### Configuration Minimale
- **Processeur** : Intel i5 ou √©quivalent AMD
- **RAM** : 8 GB minimum (16 GB recommand√©)
- **GPU** : NVIDIA GTX 1060 ou sup√©rieur (optionnel mais recommand√©)
- **Cam√©ra** : Webcam USB ou cam√©ra int√©gr√©e
- **Stockage** : 2 GB d'espace libre

### Syst√®mes d'Exploitation Support√©s
- Windows 10/11
- macOS 10.15+
- Ubuntu 18.04+

## Installation

### 1. Pr√©requis Python
```bash
# V√©rifier la version Python (3.8+ requis)
python --version
```

### 2. Cloner le Projet
```bash
git clone https://github.com/votre-repo/guardvision.git
cd guardvision
```

### 3. Cr√©er un Environnement Virtuel
```bash
# Windows
python -m venv venv
venv\Scripts\activate

# macOS/Linux
python3 -m venv venv
source venv/bin/activate
```

### 4. Installer les D√©pendances

#### D√©pendances Principales
```bash
pip install streamlit==1.28.1
pip install opencv-python==4.8.1.78
pip install tensorflow==2.13.0
pip install torch==2.0.1
pip install torchvision==0.15.2
pip install mediapipe==0.10.3
pip install numpy==1.24.3
```

#### D√©pendances Additionnelles
```bash
pip install ultralytics==8.0.165
pip install Pillow==10.0.0
pip install pandas==2.0.3
```

### 5. Structure des Dossiers
Cr√©er la structure suivante :
```
guardvision/
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îú‚îÄ‚îÄ action_model.keras
‚îÇ   ‚îî‚îÄ‚îÄ crowd_model.keras
‚îú‚îÄ‚îÄ paste.txt (votre fichier principal)
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md
```

## Configuration des Mod√®les

### Mod√®les Requis

1. **action_model.keras** : Mod√®le de reconnaissance d'actions
   - Format : TensorFlow/Keras (.keras)
   - Classes support√©es : 13 actions (Abuse, Arrest, Arson, Assault, Burglary, Explosion, Fighting, Normal, Robbery, Shooting, Shoplifting, Stealing, Vandalism)

2. **crowd_model.keras** : Mod√®le d'analyse de foule
   - Format : TensorFlow/Keras (.keras)
   - Output : Densit√© de foule (valeur num√©rique ou carte de densit√©)

### Placement des Mod√®les
```bash
mkdir models
# Copier vos mod√®les dans le dossier models/
cp votre_modele_action.keras models/action_model.keras
cp votre_modele_foule.keras models/crowd_model.keras
```

## Utilisation

### 1. Lancement de l'Application
```bash
streamlit run paste.txt
```

L'application s'ouvrira automatiquement dans votre navigateur √† l'adresse `http://localhost:8501`

### 2. Interface Utilisateur

#### Panneau de Contr√¥le (Sidebar)
- **S√©lection des Mod√®les** : Activez/d√©sactivez les mod√®les individuellement
- **Seuils de Confiance** : Ajustez la sensibilit√© de d√©tection
- **Param√®tres de Performance** : Configurez le saut d'images pour optimiser les performances
- **R√©solution Cam√©ra** : Choisissez la r√©solution d'entr√©e

#### Zone Principale
- **Flux Vid√©o en Direct** : Affichage temps r√©el avec annotations
- **R√©sultats des Mod√®les** : D√©tections actuelles avec scores de confiance
- **Journal des D√©tections** : Historique des √©v√©nements d√©tect√©s

### 3. Configuration des Seuils

#### Seuil de Confiance d'Action (0.1 - 1.0)
- **0.5-0.6** : Sensibilit√© √©lev√©e (plus de faux positifs)
- **0.7** : √âquilibre recommand√©
- **0.8-0.9** : Sensibilit√© faible (moins de faux positifs)

#### Seuil de Densit√© de Foule (0.1 - 2.0)
- **0.3-0.5** : D√©tection de petits groupes
- **0.5-1.0** : Foules moyennes
- **1.0+** : Foules denses uniquement

### 4. Param√®tres de Performance

#### Saut d'Images (Frame Skip)
- **1-2** : Traitement de toutes les images (plus pr√©cis, plus lent)
- **3-5** : √âquilibre performance/pr√©cision
- **6-10** : Performance maximale (moins pr√©cis)

## Fonctionnalit√©s Avanc√©es

### 1. G√©n√©ration de Rapports

#### Rapport Journalier Automatique
Le syst√®me g√©n√®re automatiquement des rapports d√©taill√©s incluant :
- R√©sum√© ex√©cutif avec niveau de menace
- M√©triques op√©rationnelles
- Analyse des patterns d'activit√©
- Recommandations contextuelles

#### Acc√®s aux Rapports
1. Cliquez sur "üìä Generate Report" dans le panneau de contr√¥le
2. Visualisez le rapport dans l'expandeur "üìÑ View Report"
3. T√©l√©chargez avec "üíæ Save Report"

### 2. Types de D√©tections

#### Reconnaissance d'Actions
| Action | Description | Niveau de Menace |
|--------|-------------|------------------|
| Normal | Activit√© normale | üü¢ Bas |
| Fighting | Combat/bagarre | üî¥ √âlev√© |
| Assault | Agression | üî¥ √âlev√© |
| Abuse | Abus/maltraitance | üî¥ √âlev√© |
| Shooting | Tir d'arme | üî¥ Critique |
| Robbery | Vol √† main arm√©e | üü° Moyen |
| Burglary | Cambriolage | üü° Moyen |
| Stealing | Vol simple | üü° Moyen |
| Shoplifting | Vol √† l'√©talage | üü° Moyen |
| Vandalism | Vandalisme | üü° Moyen |
| Arson | Incendie criminel | üî¥ √âlev√© |
| Explosion | Explosion | üî¥ Critique |
| Arrest | Arrestation | üü° Moyen |

#### Analyse de Foule
- **Densit√© Faible (0.1-0.5)** : Peu de personnes
- **Densit√© Moyenne (0.5-1.0)** : Groupe mod√©r√©
- **Densit√© √âlev√©e (1.0-2.0)** : Foule importante
- **Densit√© Tr√®s √âlev√©e (2.0+)** : Surpeuplement critique

## D√©pannage

### Probl√®mes Communs

#### 1. Erreur de Chargement des Mod√®les
```
Error: Model not found at: models/action_model.keras
```
**Solution** : V√©rifiez que les fichiers de mod√®les sont dans le bon dossier avec les bons noms.

#### 2. Erreur de Cam√©ra
```
Could not open camera. Please check if camera is available.
```
**Solutions** :
- V√©rifiez que la cam√©ra n'est pas utilis√©e par une autre application
- Testez avec diff√©rents indices de cam√©ra (0, 1, 2...)
- V√©rifiez les permissions de la cam√©ra

#### 3. Performance Lente
**Solutions** :
- Augmentez le saut d'images (Frame Skip)
- R√©duisez la r√©solution de la cam√©ra
- Fermez les autres applications gourmandes en ressources
- Utilisez un GPU si disponible

#### 4. Erreurs de D√©pendances
```
ModuleNotFoundError: No module named 'cv2'
```
**Solution** : R√©installez les d√©pendances :
```bash
pip install --upgrade -r requirements.txt
```

### Optimisation des Performances

#### Configuration GPU (NVIDIA)
1. Installez CUDA Toolkit 11.8
2. Installez cuDNN 8.6
3. Installez TensorFlow-GPU :
```bash
pip install tensorflow-gpu==2.13.0
```

#### Configuration M√©moire
Pour les syst√®mes avec RAM limit√©e :
```python
# Ajoutez dans le code avant l'initialisation des mod√®les
import tensorflow as tf
gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
    tf.config.experimental.set_memory_growth(gpus[0], True)
```

## Journal des Modifications

### Version 1.0.0
- Syst√®me dual-mod√®le (Action + Foule)
- Interface Streamlit compl√®te
- G√©n√©ration de rapports NLP
- D√©tection de poses MediaPipe
- Support YOLO pour d√©tection de personnes

## Support et Contribution

### Signaler un Bug
1. V√©rifiez les issues existantes
2. Cr√©ez une nouvelle issue avec :
   - Description d√©taill√©e
   - Logs d'erreur
   - Configuration syst√®me

### Demande de Fonctionnalit√©
1. D√©crivez le cas d'usage
2. Expliquez l'impact attendu
3. Proposez une impl√©mentation si possible

## Licence

Ce projet est sous licence MIT. Voir le fichier LICENSE pour plus de d√©tails.

## Versions des Biblioth√®ques

### Core Dependencies
```
streamlit==1.28.1
opencv-python==4.8.1.78
tensorflow==2.13.0
torch==2.0.1
torchvision==0.15.2
mediapipe==0.10.3
numpy==1.24.3
ultralytics==8.0.165
```

### Utility Dependencies
```
Pillow==10.0.0
pandas==2.0.3
queue (built-in)
threading (built-in)
collections (built-in)
datetime (built-in)
json (built-in)
re (built-in)
os (built-in)
time (built-in)
```

### Installation Compl√®te
```bash
pip install streamlit==1.28.1 opencv-python==4.8.1.78 tensorflow==2.13.0 torch==2.0.1 torchvision==0.15.2 mediapipe==0.10.3 numpy==1.24.3 ultralytics==8.0.165 Pillow==10.0.0 pandas==2.0.3
```

---

**Auteur** : [Votre Nom]  
**Version** : 1.0.0  
**Date** : 2024  
**Contact** : [votre.email@example.com]
